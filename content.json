{"pages":[{"title":"","text":"个人简介 分享很喜欢的老罗的一段话： “每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“ 善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶，永远保持正能量。💪💪💪💪💪💪冲鸭！！！！ -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：计算机科学与技术专业从事JAVA后端开发码畜一枚坚信代码改变世界 博客信息 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 在Icarus主题之上进行了部分修改。 更新日志：–2020.09.20：icarus4.0适配–2020.01.18：icarus3.0适配–2019.11.17：增加深色主题开关–2019.10.30：去图，精简卡片–2019.10.22：改版部分显示，优化速度–2019.10.16：文章列表加上评论数显示–2019.10.13：改版评论–2019.09.25：图片、资源接入CDN免费jsDelivr、文章加入置顶–2019.09.19：开源博客代码–2019.09.19：修改布局，拉伸布局，更宽的展示–2019.09.18：修改友链ui为一行三个，并适配移动端，暗黑模式文章增加评论链接，增加留言链接–2019.09.14：增加精简next主题–2019.09.14：利用中秋节放假，重做了首页的热门推荐、加个widget最新评论框、归档页加入文章贡献概览面板 本站推荐索引 博客主题相关 github Issue 作为博客微型数据库的应用 github page网站cdn优化加速 博客源码分享 博客换肤的一种实现方式思路 博客中gitalk最新评论的获取 博客图片上传picgo工具github图传使用 安装、部分配置icarus主题中文版 技术知识点 Java并发知识点 法律法规 法律法规数据库 中华人民共和国国旗法 中华人民共和国宪法 中华人民共和国消费者权益保护法 中华人民共和国刑事诉讼法 中华人民共和国婚姻法 中华人名共和国网络安全法 中华人民共和国劳动法 其他 网易云音乐歌单分享 计划2020计划 2019.12.31 2020-GOALS 跑两三场马拉松 2019计划 2018.12.31/21:59:00-&gt;更新于2019.12.31 2019-GOALS 购买的专业书籍至少看完一遍（并发、重构、设计模式…）-&gt; 95% 额外： 追了很多剧 总结： 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！ 时间轴记录","link":"/blog/about/index.html"},{"title":"","text":"🎈🎈微笑墙🎈🎈 彭小苒 唐艺昕 李一桐 gakki 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/blog/album/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://removeif.github.io/images/avatar.jpg 网站名称：辣椒の酱 网站地址：https://removeif.github.io 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/blog/friend/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/blog/message/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/blog/media/index.html"},{"title":"音乐歌单收藏","text":"温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/blog/music/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 碎碎念加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: '46a9f3481b46ea0129d8', clientSecret: '79c7c9cb847e141757d7864453bcbf89f0655b24', id: '666666', repo: 'issue_database', owner: 'removeif', admin: \"removeif\", createIssueManually: true, distractionFreeMode: false }); gitalk.render('comment-container1'); });","link":"/blog/self-talking/index.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/blog/2022/04/11/hello-world/"},{"title":"Hexo搭建blog","text":"Hexo搭建blog :smiley: 我的博客主页 :smiley: 环境安装NodeJs下载 nodeJs【下载12版本的，高版本会伴随一些小问题】 npm​ npm（ node package manager ）是Node的包管理工具，能解决NodeJS代码部署上的很多问题 cnpm​ cnpm的官方介绍是：cnpm是一个完整 npmjs.org 镜像，可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。 ​ 由于npmjs.org的服务器在国外（即在“墙”外），国（墙）内开发者做项目的时候，很多“包”的下载速度极慢，在这种环境下阿里巴巴为了众多开发者的便捷而出推出了淘宝镜像（即cnpm），它把npm官方的“包”全部搬到国内。 配置123456# 临时使用npm --registry https://registry.npm.taobao.org install [依赖的名称]# 持久使用（慎用）npm config set registry https://registry.npm.taobao.org# 检查是否配置成功npm config get registry 安装cnpm（推荐） ​ 不会影响npm命令，又不用每次都写淘宝地址进行依赖包的安装 1npm install -g cnpm --registry=https://registry.npm.taobao.org 使用12345678# 安装模块cnpm install [name]# 同步模块cnpm sync connect# 直接通过 web 方式来同步open https://npm.taobao.org/sync/connect# 支持 npm 除了 publish 之外的所有命令cnpm info connect Hexo框架​ Hexo官网 ​ Hexo是一个基于 nodejs 的快速生成静态博客的开源框架，支持Markdown和大多数Octopress插件，一个命令即可部署到GitHub页面、Giteee、Heroku等，强大的API，可无限扩展，拥有数百个主题和插件。 安装电脑中需要已安装Git、Node.js(6.9以上) 123456npm install hexo-cli -g# 安装依赖包npm i --save packageNamenpm i --save-dev packageName# 安装指定版本的包，版本号用@符号连接npm i webpack@1.2.1 建站123456# 初始化博客项目（最新版本已经可以在这一步安装依赖）hexo init &lt;目录名&gt;# 安装依赖npm install hexo -g# 升级npm update hexo -g 命令完成后的目录如下： 文件夹说明： 123456789101112131415|-- demo//项目跟目录名 |-- .gitignore//git时忽略的文件或目录 |-- package-lock.json |-- package.json//应用程序的信息 |-- _config.yml//网站的配置信息 |-- scaffolds//模板文件夹，Hexo的模板是指在新建的markdown文件中默认填充的内容。 | |-- draft.md | |-- page.md | |-- post.md//博文模板 |-- source//资源文件夹，存放用户资源 | |-- _posts//博文目录 | |-- hello-world.md//博文 |-- themes//主题文件夹，Hexo 会根据主题来生成静态页面 |-- landscape.//默认主题 ... 此时package.json中内容如下： npm中package.json详解 12345678910111213141516171819{ &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: { &quot;version&quot;: &quot;&quot; }, &quot;dependencies&quot;: { &quot;hexo&quot;: &quot;^3.8.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;, &quot;hexo-server&quot;: &quot;^0.3.3&quot; }} 修改配置url：网站地址，必须修改，此处博文是托管在github上，故此使用http://youname.github.io 格式作为网站名字 language：语言，设置中文，根据需要修改，中文为zh-CN 注意：配置值与配置名需要隔一个空格，否则会编译报错。 repo：部署服务器仓库地址，https://gitee.com/RainNG/blog.git 123456789101112131415161718192021222324252627# Sitetitle: 夜色微凉subtitle: ''description: '原谅我这一生放纵不羁爱自由'keywords:author: 夜色微凉#language: enlanguage: zh-CNtimezone: ''# URL## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'#url: http://example.comurl: https://rainng.gitee.io/blogroot: /blogpermalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing 'index.html' from permalinks trailing_html: true # Set to false to remove trailing '.html' from permalinks# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: https://gitee.com/RainNG/blog.git branch: master 修改post修改 scaffolds/post 文件，追加一行【为了我们创建博客的时候可以给文章添加分类】 12345title: {{ title }}date: {{ date }}tags:# 追加内容categories: 常用指令启动服务123456789# 1、Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。hexo shexo server# 2、以静态模式启动hexo server -s# 3、更改访问端口 (默认端口为4000，'ctrl + c'关闭server)hexo server -p 5000# 4、自定义 IPhexo server -i IP地址 新建文章1234567891011# 1、新建一篇文章hexo n &quot;我的第一篇文章&quot;hexo new &quot;我的第一篇文章&quot; # 2、新建一篇文章,文章名称和标题分别为bbb.md 和 bbb. 文章采用aaa布局, 此时会在站点根目录下：source/_posts/，生成bbb.md文件,如下： # --- # layout : aaa（post） # title: # date: # ---# 使用---分割的区域叫做“Front-matter”，用于指定这篇博文的变量，可手动修改hexo new aaa &quot;bbb&quot; 手动修改Front-matter： 123456789101112---layout:title: my first blogdate: 2019-05-11 16:20:56updated:comments:tags:- introduction- hexocategories:- Diary--- 文章头配置选项： 配置选项 默认值 描述 title Markdown 的文件标题 文章标题 date 文件创建时的日期时间 发布时间，应保证全局唯一 author 根 _config.yml 中的 author 文章作者 img featureImages 中的某个值 文章特征图 top true 文章是否置顶，值为 true，则会作为首页推荐文章 cover false 是否需要加入到首页轮播封面中 coverImg 无 该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 password 无 文章阅读密码，该值必须是用 SHA256 加密后的密码，防止被他人识破。 toc true 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。 mathjax false 是否开启数学公式支持 summary 无 文章卡片摘要显示的文字，如果无值程序会自动截取文章的部分内容作为摘要 categories 无 文章分类，建议一篇文章一个分类 tags 无 文章标签，一篇文章可以多个标签 生成静态文件12345678# 生成静态网页 (执行 $ hexo g后会在站点根目录下生成public文件夹, hexo会将&quot;/blog/source/&quot; 下面的.md后缀的文件编译为.html后缀的文件,存放在&quot;/blog/public/ &quot; 路径下)hexo ghexo generate# 文件生成后立即部署网站hexo generate -dhexo generate --deploy# 监视文件变动hexo g -w 部署网站安装部署插件deployer123npm install hexo-deployer-git --save# orcnpm install --save hexo-deployer-git 修改配置1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://gitee.com/RainNG/blog.git branch: master message: publish blog 部署指令123456# 将本地数据部署到远端服务器(如github)hexo dhexo deploy# 部署之前先生成静态文件hexo deploy -ghexo deploy --generate 部署问题 本地与部署pages服务页面不一致 ​ 本地使用静态文件，发布用的是cdn，浏览器保存了之前的数据，需清除浏览器缓存后再强制刷新： ​ 如FireFox 重新载入（忽略缓存）： Ctrl + F5 发表草稿1234hexo phexo publish# 通过 publish 命令将草稿移动到 source/_posts 文件夹,草稿默认是不会显示在页面中的，可在执行时加上 --draft 参数，或是把 render_drafts 参数设为 true来预览草稿。hexo publish [layout] &lt;title&gt; 清除缓存12# 清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹和 db.jsonhexo clean 查看1234node-v #查看node.js版本号npm -v #查看npm版本号hexo -v #查看hexo版本号hexo list #列出网站资料 主题配置​ 如果不想使用默认的主题，也可以下载一个新的主题，放在themes目录下，并修改 _config.yml 内的 theme 设定，即可切换主题。 Hexo 官网主题页：themes Github 官网搜索hexo-theme，选择All GitHub 安装主题渲染插件​ 在hexo站点目录(非主题目录)下安装 hexo-renderer-sass 和 hexo-renderer-scss： 注意：不安装这两个插件，更换主题打开页面时，图片等布局可能异常。 123456789# 1、将.scss样式文件渲染成最后的style.css文件cnpm install hexo-renderer-sass --savecnpm install hexo-renderer-scss --save# or 推荐npm install -g yarn # 安装yarn add hexo-renderer-sassyarn add hexo-renderer-scss# 2、cnpm install hexo-generator-json-content --save 下载主题以next主题为例：next使用教程 在themes目录下克隆next主题 12345678# snippet 主题，安利git clone git://github.com/shenliyang/hexo-theme-snippet.git themes/hexo-theme-snippet# gal 主题git clone https://github.com/ZEROKISEKI/hexo-theme-gal.git themes/gal# next 主题git clone https://github.com/theme-next/hexo-theme-next themes/next# Butterfly 主题git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly 更换主题 修改配置文件 _config.yml ： 12345678910111213141516171819202122232425## Themes: https://hexo.io/themes/theme: gal# 末尾追加jsonContent: dateFormat: MM-DD pages: title: true text: true path: true date: true excerpt: true preview: true posts: title: true text: true path: true date: true excerpt: true tags: [{ name: tag.name, slug: tag.slug, permalink: tag.permalink }] preview: true 开启页面功能123456# 开启页面功能hexo new page &quot;search&quot; # 开启搜索功能hexo new page &quot;404&quot; # 配置错误页面hexo new page &quot;tags&quot;hexo new page &quot;categories&quot;hexo new page &quot;about&quot; 重新hexo clean,hexo g，hexo s，就可以更新主题。 常用主题插件GitHub使用Gitalk网站配置Gittalk gitalk授权时403处理 Markdown​ Hexo 默认是使用 Markdown 格式的文件的，所以在写新博客之前，要先了解一下 Markdown 语法 。 Typora​ Typora 是一款支持实时预览的 Markdown 文本编辑器，所见即所得，好用免费（推荐）。 ​ 下载地址：Typora中文网 ​ Markdown 使用请参考下面这篇文章。 辅助工具PicGo​ 偏好设置 -&gt; 图像 -&gt; 上传服务设定，配置PicGo。 ​ PicGo 是一位中国开发者基于 electron-vue 开发的用于快速上传图片并获取图片 URL 链接的开源工具，GitHub主页：PicGo ​ PicGo 本体支持七牛云、腾讯云、又拍云、阿里云、SM、Imgur、GitHub等图床，Gitee图床需安装插件（PicGo 插件设置中直接搜索Gitee，然后选择一个安装即可）。 ​ 图床，即提供外链访问的图片存储服务器。可以在GitHub或Gitee中创建一个仓库作为图床。 ​ Typora 配合可以实现在文章中插入图片时自动上传并替换为链接内容，已Gitee为例： 获取 repo tokens ​ 这个 token 主要用于让 PicGo 有权限往Git服务器仓库 push 代码(图片)。 ​ 点击 头像 -&gt; 设置 -&gt; 私人令牌 ​ 新建令牌，编辑描述（用于PicGo上传图片），生成，复制保存（此字符串只会出现一次，点击其他页面后就无法再查看了，需要重新创建）。 配置PicGo： ​ 打开 PicGo ,选择图床设置，选择Gitee图床（已安装Gitee图床插件），填写参数： repo，填写格式为用户名/仓库名（如 https://gitee.com/RainNG/picgo.git 填写 RainNG/picgo） branch，填写默认分支master或者main Token，填写上一步获取的 token 值 path，选填，可以自定义名称，比如用年月来分类，不填图片会上传在仓库根目录。 customPath，这个会在上一个参数的基础上再创建一层子文件夹用于按年、年月或年季来分类保存。 customUrl，用于修改返回的 url 前缀，不填则返回原始 url。解决文件大于1M，登录后可见的问题需要更改此项。 解决”文件大于1M，登录后可见”问题 ​ 如果上传的图片大于 1M ，不管是在 Typora 中还是在浏览器网页中，是无法加载出图片的。 ​ 博客仓库打开 Gitee Pages 功能，其他人就可以访问博客仓库里的博客了，图床仓库也一样，打开它的 Gitee Pages 功能，无需登陆就可以访问里面的图片了。打开图片仓库的Pages功能，然后复制 url 到 customUrl 即可解决。 ​ 对于GitHub图床，图床设置与Gitee基本相同，只是自定义域名配置需求不同： ​ 设定自定义域名，用于修改返回的 url 前缀，不填则返回原始 url。配置CDN加速需要更改此项。 CDN 加速(jsDelivr) ​ CDN的全称是(Content Delivery Network)，即内容分发网络。其目的是通过在现有的Internet中增加一层新的CACHE(缓存)层，将网站的内容发布到最接近用户的网络”边缘“的节点，使用户可以就近取得所需的内容，提高用户访问网站的响应速度。 ​ jsDelivr CDN 官网， jsDelivr 支持 npm、GitHub、WordPress三个站点的加速。 ​ 原始图片地址格式：https://raw.githubusercontent.com/用户名/仓库名/分支名/目录/图片名.png ​ 更改后的图片地址格式：https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名/目录/图片名.png ​ 即修改GitHub图床设置的自定义域名为https://cdn.jsdelivr.net/gh/用户名/仓库名@master。 参考​ 感谢各位大大的文章，如有侵权，请联系删除。 从零开始搭建自己的个人博客 从零开始免费搭建自己的博客","link":"/blog/2021/12/22/Web/blog%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"},{"title":"Git教程","text":"Git教程 Git介绍git命令思维导图： 分布式：Git版本控制系统是一个分布式的系统，是用来保存工程源代码历史状态的命令行工具。 保存点：Git的保存点可以追踪源码中的文件, 并能得到某一个时间点上的整个工程项目的状态；可以在该保存点将多人提交的源码合并, 也可以回退到某一个保存点上。 Git离线操作性：Git可以离线进行代码提交，因此它称得上是完全的分布式处理，Git所有的操作不需要在线进行；这意味着Git的速度要比SVN等工具快得多，因为SVN等工具需要在线时才能操作，如果网络环境不好， 提交代码会变得非常缓慢。 Git****基于快照：SVN等老式版本控制工具是将提交点保存成补丁文件，Git提交是将提交点指向提交时的项目快照，提交的东西包含一些元数据(作者，日期，GPG等)。 Git****的分支和合并：分支模型是Git最显著的特点，因为这改变了开发者的开发模式，SVN等版本控制工具将每个分支都要放在不同的目录中，Git可以在同一个目录中切换不同的分支。 分支即时性：创建和切换分支几乎是同时进行的，用户可以上传一部分分支，另外一部分分支可以隐藏在本地，不必将所有的分支都上传到GitHub中去。 分支灵活性：用户可以随时创建、合并、删除分支，多人实现不同的功能，可以创建多个分支进行开发，之后进行分支合并，这种方式使开发变得快速、简单、安全。 Git工作流程 从远程仓库中克隆 Git 资源作为本地仓库。 从本地仓库中checkout代码然后进行代码修改 在提交前先将代码提交到暂存区。 提交修改。提交到本地仓库。本地仓库中保存修改的各个历史版本。 在修改完成后，需要和团队成员共享代码时，可以将代码push到远程仓库。 Git安装​ 官网下载地址：https://git-scm.com/download Windows下载相应git版本，默认安装即可 ​ 默认使用Git Bash即可 选择提交的时候换行格式 （1）检查出windows格式转换为unix格式：将windows格式的换行转为unix格式的换行再进行提交。 （2）检查出原来格式转为unix格式：不管什么格式的，一律转为unix格式的换行再进行提交。 （3）不进行格式转换 : 不进行转换，检查出什么，就提交什么。 Linux1sudo apt-get install git 常用配置用户、邮件配置1234567#1、查询当前的Git配置git config --list#2、编辑Git配置文件git config -e [--global]#3、配置邮箱、有户名git config --global user.email &quot;666.com&quot;git config --global user.name &quot;rain&quot; 设置大小写敏感​ Windows上的Git默认是大小写不敏感的。 1git config core.ignorecase false 远程仓库GitHub创建仓库 SSHGithub支持两种同步方式“https”和“ssh”。 如果使用https很简单基本不需要配置就可以使用，但是每次提交代码和下载代码时都需要输入用户名和密码。 如果使用ssh方式就需要客户端先生成一个密钥对，即一个公钥一个私钥。然后还需要把公钥放到githib的服务器上。 SSH（Secure Shell）：安全外壳协议 基于密匙的安全验证 ​ 使用ssh协议通信时，推荐使用基于密钥的验证方式。你必须为自己创建一对密匙，并把公用密匙放在需要访问的服务器上。 ​ 如果你要连接到SSH服务器上，客户端软件就会向服务器发出请求，请求用你的密匙进行安全验证。服务器收到请求之后，先在该服务器上你的主目录下寻找你的公用密匙，然后把它和你发送过来的公用密匙进行比较。 ​ 如果两个密匙一致，服务器就用公用密匙加密“质询”（challenge）并把它发送给客户端软件。 ​ 客户端软件收到“质询”之后就可以用你的私人密匙解密再把它发送给服务器。 ssh密钥生成Windows下ssh秘钥路径：C:\\Users\\用户名\\.ssh 秘钥文件： ​ id_rsa 私钥 ​ id_rsa.pub 公钥 如果没有秘钥文件，就打开命令行工具生成： 1ssh-keygen -t rsa ssh密钥配置进入 Settings 页面： ​ 在key部分将 id_rsa.pub 文件内容添加进去，然后点击 “Add SSH key” 按钮完成配置。 ssh多个私钥管理​ 使用本地托管多个个ssh的密钥，不同的账号用不同的密匙。 生成SSH Key1234567# 1、Creates a new ssh key using the provided email Generating public/private rsa key pair.$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;# 2、输入将要保存的路径，我的默认为当前路径（/c/Users/liutl/.ssh/id_rsa）,但是不能使用默认文件id_rsa，要添加新账户就要生起一个成新的好记的名字，例如id_rsa_workEnter file in which to save the key (/c/Users/zhaoyafei/.ssh/id_rsa):# 3、输入回车后提示输入一个类似于密码的号，直接回车Enter passphrase (empty for no passphrase):Enter same passphrase again: 识别新的私钥​ 默认SSH只会读取id_rsa，所以为了让SSH识别新的私钥，需要将其添加到SSH agent。 12345$ ssh-add ～/.ssh/id_rsa_work#该命令如果报错：Could not open a connection to your authentication agent.# 依次执行命令，看是否成功ssh-agent bash ssh-add -l 修改config文件 Linux /etc/.gitconfig 文件：包含了适用于系统所有用户和所有库的值。传递参数选项’–system’ ，读和写这个文件。 ~/.gitconfig 文件 ：具体到用户。传递–global 选项使Git 读或写这个特定的文件。 .git/config文件：局部配置文件，在.git/config中的值覆盖了在/etc/gitconfig中的同一个值。 该文件用于配置私钥对应的服务器。 1234567891011# Default github （默认的）Host github.comHostName github.comUser gitIdentityFile ~/.ssh/id_rsa# second user(work@gmail.com)Host github_workHostName github.comUser gitIdentityFile ~/.ssh/id_rsa_work ​ 这样配置，也就是使用hostname为github.com会根据用户名的不同，去使用不用的private key。github上，也可以添加对应的公钥。 Windows ​ Git在$HOME目录中查找.gitconfig文件（通常位于C:\\Documents and Settings$USER下）。 将SSH key输入到GitHub网站中​ 将生成的id_rsa_work.pub输入到GitHub网站中。 注意：github根据配置文件的user.email来获取github帐号显示author信息，所以对于多帐号用户一定要记得将user.email改为相应的email 123# 设置局部的user.name和user.emailgit config user.name &quot;xxxxxx&quot;git config user.email &quot;xxx@xxx.com&quot; Git常用命令命令列表1 版本管理远程同步查看状态12345# 显示所有远程仓库git remote -v# 显示某个远程仓库的信息git remote show [remote] 从远程仓库克隆123456# 增加一个新的远程仓库，并命名git remote add [shortname] [url]# 克隆远程仓库git clone [git.url]# 下载远程仓库的所有变动git fetch [remote] 从远程仓库拉取12# 取回远程仓库的变化，并与本地分支合并git pull [remote] [branch] 推送到远程仓库1234567891011121314git push &lt;remote 名字&gt; &lt;本地分支的名字&gt; : &lt;远程库的名字&gt;git push origin HEAD:refs/for/master# origin : 是远程的库的名字# HEAD: 是一个特别的指针，它是一个指向你正在工作的本地分支的指针，可以把它当做本地分支的别名，git这样就可以知道你工作在哪个分支# refs/for :意义在于我们提交代码到服务器之后是需要经过code review 之后才能进行merge的# refs/heads 不需要经过code review# 上传本地指定分支到远程仓库（初次更新加-u）git push (-u) [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突，慎用git push [remote] --force# 推送所有分支到远程仓库git push [remote] --all 关联远程仓库123456#1、把这个目录变成git可以管理的仓库git init#2、添加远程仓库git remote add origin [git.url]#3、本地仓库与远程仓库关联git branch –-set-upstream-to=origin/master master 查看命令查看状态123456789101112# 显示有变更的文件git status# 显示指定文件是什么人在什么时间修改过git blame [file]# 显示某次提交的元数据和内容变化git show [commit]# 显示某次提交发生变化的文件git show --name-only [commit]# 显示某次提交时，某个文件的内容git show [commit]:[filename]# 显示当前分支的最近几次提交git reflog 查看日志12345678910111213141516171819# 显示当前分支的版本历史git log# 显示commit历史，以及每次commit发生变更的文件git log --stat# 搜索提交历史，根据关键词git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名git log --follow [file]git whatchanged [file]# 显示指定文件相关的每一次diffgit log -p [file]# 显示过去5次提交git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序git shortlog -sn 查看差异12345678910# 显示暂存区和工作区的差异git diff# 显示暂存区和上一个commit的差异git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异git diff HEAD# 显示两次提交之间的差异git diff [first-commit] [second-commit]# 显示今天你写了多少行代码git diff --shortstat &quot;@{0 day ago}&quot; 12345678910#1、查看仓库状态git status#2、查看X文件修改了那些内容git diff * #3、查看历史记录git log#4、查看历史记录的版本号id（记录每一次命令,不论是否提交）git reflog#5、如果信息量太多可以进行比较好的列表显示git log --pretty=oneline 撤销reset​ 撤销某次提交，但是此次之后的修改都会被退回到暂存区，把HEAD向后移动了一下。 123456789101112# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变git reset [file]# 重置暂存区与工作区，与上一次commit保持一致git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变git reset --keep [commit]# 回退到第几个版本git reset --hard HEAD~N revert​ 用一次新的commit来回滚之前的commit，HEAD继续前进。 1234# 新建一个commit，用来撤销指定commit，后者的所有变化都将被前者抵消，并且应用到当前分支git revert [commit]#git revert –hard a167 checkout1234567# 恢复暂存区的指定文件到工作区（撤销未提交的修改）git checkout [file]git checkout -- [file]# 恢复某个commit的指定文件到暂存区和工作区git checkout [commit] [file]# 恢复暂存区的所有文件到工作区git checkout . stash123# 暂时将未提交的变化移除，稍后再移入git stashgit stash pop 添加文件12345678# 1、添加指定文件到暂存区git add [file1] [file2] ...# 2、添加指定目录到暂存区，包括子目录git add [dir]# 3、添加当前目录的所有文件到暂存区，慎用git add .# 4、对于同一个文件的多处变化，可以实现逐块分次提交git add -p file 提交提交到本地库12345678# 1、提交暂存区到仓库区git commit -m [message]# 2、提交暂存区的指定文件到仓库区git commit [file1] [file2] ... -m [message]# 3、提交工作区自上次commit之后的变化，直接到仓库区git commit -a# 4、提交时显示所有diff信息git commit -v 追加修改12345# 1、使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息git commit --amend -m [message]# 2、重做上一次commit，并包括指定文件的新变化git commit --amend [file1] [file2] ... 提交到远程库删除删除工作区文件12# 删除工作区文件，并且将这次删除放入暂存区git rm [file1] [file2] ... 停止追踪指定文件12# 停止追踪指定文件，但该文件会保留在工作区git rm --cached [file] 改名文件12# 改名文件，并且将这个改名放入暂存区git mv [file-original] [file-renamed] 删除未添加到版本中的文件或者文件夹12345678910# 删除 untracked filesgit clean -f # 连 untracked 的目录也一起删掉git clean -fd# 连 gitignore的untrack 文件/目录也一起删掉 （一般这个是用来删掉编译出来的 .o一类的文件）git clean -xfd# 在使用清理 git clean之前，建议加上 -n 来先看看会删掉哪些文件，防止重要文件被误删git clean -nxfdgit clean -nfgit clean -nfd 隐藏的文件12345678910#1、把当前的工作隐藏起来 等以后恢复现场后继续工作git stash#2、查看所有被隐藏的文件列表git stash list#3、恢复被隐藏的文件，但是内容不删除git stash apply#4、删除文件git stash drop#5、恢复文件的同时 也删除文件git stash pop 分支管理查看分支123456# 1、查看本地所有的分支git branch# 2、查看远程分支,本地和远程git branch -a# 3、列出所有远程分支git branch -r 创建分支123456789101112# 1、新建一个分支，但依然停留在当前分支git branch [branch-name]# 2、新建一个分支，并切换到该分支git checkout -b [branch-name]# 3、新建一个分支，指向指定commitgit branch [branch] [commit]# 4、新建一个分支，与指定的远程分支建立追踪关系git branch --track [branch] [remote-branch]# 5、重命名分支git branch -m dev [branch-name]# 6、建立追踪关系，在现有分支与指定的远程分支之间git branch --set-upstream [branch] [remote-branch] 删除分支12345#1、删除分支git branch -d [branch-name]#2、删除远程的dev分支git push origin --delete [branch-name]git branch -dr [remote/branch] 切换分支1234# 切换到指定分支，并更新工作区git checkout [branch-name]# 切换到上一个分支git checkout - 推送分支1234#1、把当前新增的dev分支推送到远程库(远程仓库没有该分支则会新建立该分支)git push origin dev#2、提交修改并创建远程分支devgit push --set-upstream origin dev 拉取分支12345678#方法一git checkout -b 本地分支名x origin/远程分支名x#方法二git fetch origin 远程分支名x:本地分支名x# clone到指定目录git clone xxx.git &quot;指定目录&quot;# clone时创建新的分支替代默认Origin HEAD（master）git clone -b branchname xxx.git 合并分支1234# 1、合并指定分支到当前分支git merge [branch]# 2、选择一个commit，合并进当前分支git cherry-pick [commit] ​ 通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。 1git merge –-no-ff -m “注释” dev 合并过程： 12345678910#1、切换到develop分支git checkout develop#2、把develop分支代码拉取到本地git pull#3、切换到master主干git checkout master#4、合并develop分支代码到mastergit merge develop#5、提交到远程master主干git push 冲突解决​ 根据提示冲突文件解决冲突。 标签管理查看tag1234# 列出所有taggit tag# 查看tag信息git show [tag] 新建tag123456# 新建一个tag在当前commitgit tag [tag]# 新建一个tag在指定commitgit tag [tag] [commit]# 新建一个分支，指向某个taggit checkout -b [branch] [tag] 提交tag1234# 提交指定taggit push [remote] [tag]# 提交所有taggit push [remote] --tags 删除tag1234# 删除本地taggit tag -d [tag]# 删除远程taggit push origin :refs/tags/[tagName] 其它12# 生成一个可供发布的压缩包git archive Git分支管理策略主分支Master​ 代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。 ​ Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。 开发分支Develop​ 主分支只用来分布重大版本，日常开发应该在另一条分支上完成。把开发用的分支，叫做Develop。 ​ 这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在Master分支上，对Develop分支进行”合并”（merge）。 123456# 创建Develop分支git checkout -b develop master# 切换到Master分支git checkout master# 对Develop分支进行合并git merge --no-ff develop ​ 默认情况下，Git执行”快进式合并”（fast-farward merge），会直接将Master分支指向Develop分支。 ​ 使用–no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。 临时性分支】临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种： 123 * 功能（feature）分支 * 预发布（release）分支 * 修补bug（fixbug）分支 功能分支​ 功能分支，是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。 1234567# 创建一个功能分支：git checkout -b feature-x develop# 开发完成后，将功能分支合并到develop分支：git checkout developgit merge --no-ff feature-x# 删除feature分支：git branch -d feature-x 预发布分支​ 预发布分支，是指发布正式版本之前（即合并到Master分支之前），可能需要有一个预发布的版本进行测试。 ​ 预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。 123456789101112# 创建一个预发布分支：git checkout -b release-1.2 develop# 确认没有问题后，合并到master分支：git checkout mastergit merge --no-ff release-1.2# 对合并生成的新节点，做一个标签git tag -a 1.2# 再合并到develop分支：git checkout developgit merge --no-ff release-1.2#最后，删除预发布分支：git branch -d release-1.2 修补bug分支​ 修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。 ​ 修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。 1234567891011# 创建一个修补bug分支：git checkout -b fixbug-0.1 master# 修补结束后，合并到master分支：git checkout mastergit merge --no-ff fixbug-0.1git tag -a 0.1.1# 再合并到develop分支：git checkout developgit merge --no-ff fixbug-0.1# 最后，删除&quot;修补bug分支&quot;：git branch -d fixbug-0.1 忽略文件 .gitignore​ .gitignore 配置文件用于配置不需要加入版本管理的文件。 配置语法： ​ “/“ 开头表示目录；​ “?” 通配单个字符；​ “[]” 包含单个字符的匹配列表；​ “!” 表示不忽略(跟踪)匹配到的文件或目录；​ 说明：git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效； 编辑 .gitignore 文件： 12345678# 1、忽略目录foder下的全部内容（根目录、某个子目录）foder/* # 2、忽略根目录下的 /foder/ 目录的全部内容/foder/*#忽略全部内容，但是不忽略 .gitignore文件,根目录下的 /fw/bin/ 和 /fw/sf/ /*!.gitignore!/fw/bin/!/fw/sf/ 注意问题： .gitignore文件只对还没有加入版本管理的文件起作用，如果之前已经用git把要忽略的文件纳入了版本库，就不起作用了。 git 打补丁patch与diff .diff：git diff生成的UNIX标准补丁文件，只记录文件改变的内容，不带有commit记录信息,多个commit可以合并成一个diff文件。 .patch：git format-patch生成的Git专用.patch 文件，带有记录文件改变的内容，也带有commit记录信息,每个commit对应一个patch文件。 创建patch与diff创建patch文件1234#1、某次提交（含）之前的几次提交的patchgit format-patch 【commit sha1 id】-n#2、某两次提交之间的所有patchgit format-patch 【commit sha1 id】..【commit sha1 id】 创建diff文件1git diff 【commit sha1 id】 【commit sha1 id】 &gt; 【diff文件名】 应用patch与diff 检查patch/diff是否能正常打入 12git apply --check 【path/to/xxx.patch】git apply --check 【path/to/xxx.diff】 打入patch/diff 12345git apply 【path/to/xxx.patch】git apply 【path/to/xxx.diff】#或者git am 【--s --signoff】 【path/to/xxx.patch】git am 【--whitespace=fix】 【path/to/xxx.patch】 冲突解决 使用 以下命令行，自动合入 patch 中不冲突的代码改动，同时保留冲突的部分： 1git apply --reject xxxx.patch 同时会生成后缀为 .rej 的文件，保存没有合并进去的部分的内容，可以参考这个进行冲突解决。 解决完冲突后删除后缀为 .rej 的文件，并执行git add.添加改动到暂存区. 继续冲突合入 123git am --resolved#或者git am --continue 合入冲突： 1234# 跳过此次冲突，也可以执行git am --skip#回退打入patch的动作，还原到操作前的状态git am --abort 更改某个提交内容可以创建一个分支，用于rebase: 1git checkout -b rebase_tmp rebase 要指定parent commitID。 直接更改某次提交123456789101112131415161718# 1、HEAD移到需要更改的commit上:git rebase -i 0bdf89^# 1.1、弹出的交互式界面中显示的commit 信息，找到需要更改的commit, 将行首的pick改成edit, 按esc, 输入:wq退出# 2、更改文件# 3、添加改动文件到暂存git add file_mod# 4 追加改动到第一步中指定的commit上git commit --amend# 5、移动HEAD到最新的commit处git rebase --continue# 6、解决冲突: # 6.1、编辑冲突文件, 解决冲突 # 6.2、添加修改冲突文件到暂存 git add . # 6.3、追加改动到上一步中指定的commit上 git commit --amend # 6.4、解决冲突之后移动HEAD到最新的commit处 git rebase --continue 将工作空间中的改动追加到某次提交上123456789101112131415161718192021# 1、保存工作空间中的改动git stash# 2、将HEAD移到需要更改的commit上:git rebase f744c32^ --interactive# 2.1、弹出的交互式界面中显示的commit 信息，找到需要更改的commit, 将行首的pick改成edit, 按esc, 输入:wq退出# 3、执行命令git stash pop# 4、添加改动文件到暂存git add file_mod# 5、追加改动到第一步中指定的commit上git commit --amend# 6、移动HEAD到最新的commit处git rebase --continue# 7、解决冲突: # 7.1、编辑冲突文件, 解决冲突 # 7.2、添加修改冲突文件到暂存 git add . # 7.3、追加改动到上一步中指定的commit上 git commit --amend # 7.4、解决冲突之后移动HEAD到最新的commit处 git rebase --continue Git常见问题window与linux的换行符问题123git config --global core.autocrlf falsegit config --global core.filemode falsegit config --global core.safecrlf true AutoCRLF： 123456#提交时转换为LF，检出时转换为CRLFgit config --global core.autocrlf true #提交时转换为LF，检出时不转换git config --global core.autocrlf input #提交检出均不转换git config --global core.autocrlf false 修改文件权限后文件状态修改123456#1、修改文件夹权限chmod -R 755 test_dir#2、查看 git 仓库状态，提示文件夹下所有文件被修改git status#3、配置文件模式，忽略文件或文件夹权限修改，解决git config core.filemode false 拉取仓库中某个目录1234#1、开启 Git 的稀疏签出功能, 开启之后方能限制 pull Or push 时规定的某一个目录git config core.sparsecheckout true#2、配置需检出的目录echo firstDir/* &gt;&gt; .git/info/sparse-checkout Github访问速度慢优化思路：通过绕过DNS解析，直接在本地绑定host 查询DNSDNS查询网站： ​ https://www.ipaddress.com/ ​ http://tool.chinaz.com/dns 查询 github 相关网址域名 12github.comgithub.global.ssl.fastly.net 修改hostswindows下打开文件：C:\\Windows\\System32\\drivers\\etc\\hosts 末尾追加内容： 12140.82.112.3 github.com199.232.69.194 github.global.ssl.fastly.net 刷新DNSwindows下刷新DNS： 1ipconfig /flushdns 切换git 命令提示中文到英文12345#出现全中文的提示，切换到中文#1:写入echo &quot;alias git='LANG=en_GB git'&quot; &gt;&gt; ~/.bashrc#2:生效source ~/.bashrc git push警告 解决办法：‘matching’ 参数是 Git 1.x 的默认行为，如果你执行 git push 但没有指定分支，它将 push 所有你本地的分支到远程仓库中对应匹配的分支。而 Git 2.x 默认的是 simple，意味着执行 git push 没有指定分支时，只有当前分支会被 push 到你使用 git pull 获取的代码。 根据提示，修改git push: 1git config --global push.default matching 再次执行git push。 当前分支没有追踪信息There is no tracking information for the current branch…则说明本地分支和远程分支的链接关系没有创建，用命令： 1git branch --set-upstream branch-name origin/branch-name 冲突，推送失败 ![rejected] dev -&gt; dev (non-fast-forward) … Updates were rejected because the tip of your current branch 推送失败，因为远程代码的最新提交和你试图推送的提交有冲突，解决办法： ​ 先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送。 OpenSSL SSL_readOpenSSL SSL_read: Connection was reset, errno 10054 修改设置，解除ssl验证 1git config --global http.sslVerify false 不能追踪某个文件夹下的修改fatal: Pathspec ‘xxx’ is in submodule 1git rm -rf --cached folder 检测不到文件变化​ git 提交之后，在git上某个文件有后缀@b4c4u7之类的。 ​ 本地 git status 的时候检测不到文件的变化： 12345# 从.git/index中删除所有变更过的文件最后再正常提交git rm -r --cached . git add .git commit -m &quot;Initial commit&quot;git push origin master Git - svnSVN是集中式版本控制系统，版本库是集中放在中央服务器的。 Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库。 安装1sudo apt-get install git-svn 下载svn代码1git svn clone url 这个操作会从第一个版本开始同步，若版本迭代太多会很费时，优化处理是检出最近的n个版本： 1234#1、查询最后的版本号为 Nosvn info url#2、检出最近 n 个版本，检出开始版本号为 m=No-ngit svn clone -r m:HEAD url 更新svn仓库到本地1git svn rebase 本地修改提交到svn仓库1git svn dcommit 提交冲突解决1234567891011121314#0、提交发生冲突git svn dcommit#1、获取svn服务器上的最新冲突文件git svn rebase#2、打开冲突文件，修改代码，解决冲突git rebase –continue#3、告知git已完成冲突解决git add conflict.c#4、再次检查冲突git rebase –continue#5、查看日志git log#6、再次提交git svn dcommit 查看log12345678910#1、显示每次修改提交的文件git svn log -v#2、查看提交日志git log#3、可以查看每次提交log和对应的修改内容git log -p#4、查看每次提交log和对应的修改文件git log --stat (可以查看每次提交log和对应的修改文件)#5、查看某人的loggit log --author= svn常用命令12345678910111213141516171819#svn常命令svn blame (praise, annotate, ann)svn changelist (cl)svn cleanupsvn copy (cp)svn exportsvn importsvn locksvn mergeinfosvn mkdirsvn move (mv, rename, ren)svn propdel (pdel, pd)svn propedit (pedit, pe)svn propget (pget, pg)svn proplist (plist, pl)svn propset (pset, ps)svn resolvedsvn switch (sw)svn unlock 添加12# 添加文件或目录svn add file|dir 拉取代码123# 获取svn代码svn co # 简写svn checkout 更新12svn up # 简写svn update 提交123# 提交代码修改svn ci # 简写svn commit -m 指定提交修改备注 删除文件1svn delete (del, remove, rm) 撤销12# 撤销本地修改svn revert 合并1234# 合并svn和本地代码svn merge# 合并冲突代码svn resolve 查看查看状态123# 查看本地修改情况：列出本地修改或增加的文件信息svn st/stat # 简写svn status “ ” 无修改 “A” 新增 “C” 冲突 “D” 删除 “G” 合并 “I” 忽略 “M” 改变 “R” 替换 “X” 未纳入版本控制，但被外部定义所用 “?” 未纳入版本控制 “!” 该项目已遗失 (被非 svn 命令所删除) 或是不完整 查看日志12# 查看提交日志svn log -l number 指定只显示最近的几条日志 查看信息12# 查看当前的svn信息，会显示svn库的URL，最新版本和最后提交时间svn info 查看差异123456789# 将本地代码和svn上进行对比，可指定文件svn di # 简写svn diff# 比较本地文件和某版本号此文件svn diff -r 版本号 文件名# 比较版本23和版本24svn diff -r 23:24# 比较某文件的版本23和版本24svn diff -r 23:24 文件名 查看指定版本某文件内容12# 显示特定版本的某文件内容svn cat -r 版本号 文件名 查看目录列表1234# 显示svn下目录列表svn list(ls)# 查看每一个目录最后更新的人、版本、时间svn list -v 查看帮助12# 查看svn帮助，或特定命令帮助svn help [command] 属性获取属性1svn propget(pg,pget) 设置属性123svn propset(ps,pset)# -F [--file] ARG ：从文件 ARG 读取属性值svn ps svn:ignore -F .svnignore . 编辑属性1svn propedit(pe,pedit) svn:ignore 目录名称 恢复属性​ 在不影响内容更改的情况下还原所有属性更改： 1svn revert `svn status | grep '^ M' | sed 's/^ M \\+//g'` 忽略不必要的文件和文件夹propset(ps,pset) 用于设置属性的值；**propget(pg,pget) **用于获取属性的值。 ​ svn pg svn:ignore #获取属性值 ​ svn ps svn:ignore ‘value’ path #设置属性值 忽略文件夹1234567891011# 1.配置SVN默认编辑器vi ~/.bash_profile# 最后一行加上：export SVN_EDITOR=vim # 定义svn editor为vim编辑# 2.让配置生效source ~/.bash_profile# 3.忽略当前路径下test文件夹svn propset svn:ignore 'test' ./property 'svn:ignore' set on '.'# 4.使用 -R 递归属性配置，子文件夹也进行忽略 svn propset svn:ignore -R *.class . 设置忽略目录或文件： svn propedit svn:ignore . #最后的点号表示当前目录不能少 此时会打开vim编辑器，编辑这个文件，即告诉svn哪些目录或者目录应该被忽略，可能会有报错： svn: None of the environment variables SVN_EDITOR, VISUAL or EDITOR are set, and no ‘editor-cmd’ run-time configuration option was found 说明没有给svn的忽略目录设置文件指定使用什么来编辑，可执行如下命令，或者将这行命令写入到启动脚本: ~/.bash_profile 中 export SVN_EDITOR=vim 也可以直接修改SVN的配置文件：修改这行为：editor-cmd=vim 即可实现。 如写到启动脚本保存退出，则可执行命令 source ~/.bash_profile 来使配置文件立即生效。成功打开文件后一行编写一个忽略的目录或文件即可。保存后会有提示svn:ignore已经修改，此时再执行svn commit提交即可。 清空忽略内容12345# 清空svn:ignore的值svn ps svn:ignore '' ./property 'svn:ignore' set on '.'# 删除忽略svn status --no-ignore 提交空文件夹​ 提交文件夹 忽略文件夹内容(前提是文件夹未在版本控制内) 12svn propset svn:ignore '*' testsvn ci -m 'adding &quot;test1&quot; and ignore its contents.' 忽略已提交的文件夹​ 已经创建了文件夹，并加入了版本控制，现在想忽略这个文件夹，但要保持文件夹的内容 123456789101112# 导出一个不受版本控制的目录svn export test1/ ./test1-tmpExport complete.# 删除目录svn rm test1# 提交svn ci -m 'delete test1'# 重名名文件mv ./test1-tmp/ ./test1# 将新文件忽略掉svn ps svn:ignore 'test1' ./property 'svn:ignore' set on '.' 忽略多个目录给属性设置多个值123456789# 设置svn ps svn:ignore &quot;&gt; d1&gt; d2&gt; d3&gt; &quot; .property 'svn:ignore' set on '.'# 查看忽略属性svn pg svn:ignore 通配符​ 属性值也可以使用通配符，但是通配符不可以加在末尾，只能加在前面。 123456# 通配符加在末尾会报错svn ps svn:ignore 'd*' .'d2' is not under version control# 通配符加在前面不会报错svn ps svn:ignore '*2' .property 'svn:ignore' set on 'test2'","link":"/blog/2021/12/22/Tools/git/Git%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"blog","slug":"blog","link":"/blog/tags/blog/"},{"name":"git","slug":"git","link":"/blog/tags/git/"}],"categories":[{"name":"Web","slug":"Web","link":"/blog/categories/Web/"},{"name":"Tools","slug":"Tools","link":"/blog/categories/Tools/"}]}